name: "Terraform Plan"

on:
  workflow_call:
    inputs:
      Tf_Cloud_Organization:
        description: "cloud organization"
        required: true
        type: string
      Tf_Cloud_Hostname:
        required: true
        type: string
      Tf_Workspace:
        required: true
        type: string
      Tf_Destroy:
        required: true
        type: string
    secrets:
      GithubsToken:
       required: true
      TF_API_TOKEN:
       required: true
      

env:
  TF_CLOUD_ORGANIZATION : ${{ inputs.Tf_Cloud_Organization }}
  TF_CLOUD_HOSTNAME : ${{ inputs.Tf_Cloud_Hostname }}
  TF_WORKSPACE : ${{ inputs.Tf_Workspace }}
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
  TF_DESTROY: ${{ inputs.Tf_Destroy }}
  GithubToken: ${{secrets.GithubsToken}}
 # ARM_CLIENT_ID:  ${{ vars.ARM_CLIENT_ID }}
 # ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
 # ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
 # ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs:
      ContinueToApprovals: ${{ steps.tf-plan-string.outputs.ContinueToApprovals }}
      Terraformdestroyplan: ${{ steps.tf-plan-string.outputs.Terraformdestroyplan }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: $TF_TOKEN_app_terraform_io

      - name: Terraform Init
        run: terraform init

      - name: check
        run: ls .terraform/modules/rg
        
      - name: Terraform Destroy Plan
        id: tf-plan
        run: |
        
            echo "------------------------------------------"
            export exitcode=0
            autotfvars=()
            for file in $(ls dev/); do
                if [[ "$file" == *auto.tfvars ]]; then
                    autotfvars+=($PWD/dev/$file)
                fi
            done
            echo "==============================="
            echo ${autotfvars[0]}
            echo ${autotfvars[*]}
            echo $PWD
            echo "+++++++++++++++++++++++++++++"
            if [[ "${#autotfvars[@]}" -gt 1 ]] ; then
                    terraform plan -destroy -var-file=<(cat ${autotfvars[*]}) -no-color -out tfplan || export exitcode=$?
            		echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
                    
                    if [ $exitcode -eq 1 ]; then
                      echo Terraform Plan Failed!
                      exit 1
                    else 
                      exit 0
                    fi
            else
                    terraform plan -destroy -var-file=<(cat ${autotfvars[0]}) -no-color -out tfplan || export exitcode=$?
            		echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
                    
                    if [ $exitcode -eq 1 ]; then
                      echo Terraform Plan Failed!
                      exit 1
                    else 
                      exit 0
                    fi
            fi
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan) 
          if echo "$TERRAFORM_PLAN" | grep -q 'No changes. No objects need to be destroyed.'
          then
            export ContinueToApprovals=0
          else
            export ContinueToApprovals=1
          fi
          echo "ContinueToApprovals=$ContinueToApprovals" >> $GITHUB_OUTPUT
          echo Terraformdestroyplan="$TERRAFORM_PLAN" >> $GITHUB_OUTPUT

        
      - name: Publish Artifact - Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

  Approvals:
    name: Approvals
    needs: ['terraform']
    runs-on: ubuntu-latest
    outputs:
      TerraformApplyContinue: ${{ steps.continuerun.outputs.TerraformApplyContinue }}
    if: needs.terraform.outputs.ContinueToApprovals == 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests
      - name: execute py script
        id: continuerun
        run: |
          python my_file.py "$GithubToken" "${{ needs.terraform.outputs.Terraformdestroyplan }}" "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" "${{ github.run_id }}"


  apply:
    needs: ['Approvals']
    name: "apply"
    runs-on: ubuntu-latest
    if:  needs.Approvals.outputs.TerraformApplyContinue == 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
   
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: $TF_TOKEN_app_terraform_io  
      # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
         name: tfplan
         
      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Plan
        run: terraform apply tfplan
