name: "Terraform Plan"

on:
  workflow_call:
    inputs:
      Tf_Cloud_Organization:
        description: "cloud organization"
        required: true
        type: string
      Tf_Cloud_Hostname:
        required: true
        type: string
      Tf_Workspace:
        required: true
        type: string
      Tf_Destroy:
        required: true
        type: string
    secrets:
      GithubsToken:
       required: true
      TF_API_TOKEN:
       required: true
      

env:
  TF_CLOUD_ORGANIZATION : ${{ inputs.Tf_Cloud_Organization }}
  TF_CLOUD_HOSTNAME : ${{ inputs.Tf_Cloud_Hostname }}
  TF_WORKSPACE : ${{ inputs.Tf_Workspace }}
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
  TF_DESTROY: ${{ inputs.Tf_Destroy }}
  GithubToken: ${{secrets.GithubsToken}}
 # ARM_CLIENT_ID:  ${{ vars.ARM_CLIENT_ID }}
 # ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
 # ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
 # ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs:
      ContinueToApprovals: ${{ steps.tf-plan-string.outputs.ContinueToApprovals }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: $TF_TOKEN_app_terraform_io

      - name: Terraform Init
        run: terraform init

      - name: check
        run: ls .terraform/modules/rg
        
      - name: Terraform Destroy Plan
        id: tf-plan
        run: |
        
            echo "------------------------------------------"
            export exitcode=0
            autotfvars=()
            for file in $(ls dev/); do
                if [[ "$file" == *auto.tfvars ]]; then
                    autotfvars+=($PWD/dev/$file)
                fi
            done
            echo "==============================="
            echo ${autotfvars[0]}
            echo ${autotfvars[*]}
            echo $PWD
            echo "+++++++++++++++++++++++++++++"
            if [[ "${#autotfvars[@]}" -gt 1 ]] ; then
                    terraform plan -destroy -var-file=<(cat ${autotfvars[*]}) -no-color -out tfplan || export exitcode=$?
            		echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
                    
                    if [ $exitcode -eq 1 ]; then
                      echo Terraform Plan Failed!
                      exit 1
                    else 
                      exit 0
                    fi
            else
                    terraform plan -destroy -var-file=<(cat ${autotfvars[0]}) -no-color -out tfplan || export exitcode=$?
            		echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
                    
                    if [ $exitcode -eq 1 ]; then
                      echo Terraform Plan Failed!
                      exit 1
                    else 
                      exit 0
                    fi
            fi
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan) 
          if echo "$TERRAFORM_PLAN" | grep -q 'No changes. No objects need to be destroyed.'
          then
            export ContinueToApprovals=0
          else
            export ContinueToApprovals=1
          fi
          echo "ContinueToApprovals=$ContinueToApprovals" >> $GITHUB_OUTPUT
    

        
      - name: Publish Artifact - Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

  Approvals:
    name: Approvals
    needs: ['terraform']
    runs-on: ubuntu-latest
    outputs:
      TerraformApplyContinue: ${{ steps.continuerun.outputs.TerraformApplyContinue }}
    if: needs.terraform.outputs.ContinueToApprovals == 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
   
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: $TF_TOKEN_app_terraform_io  
     
      # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
         name: tfplan
         
      - name: Terraform Init
        run: terraform init
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests
      - name: export py script env variables
        run: |
          terraformplan=$(terraform show -no-color tfplan)
          getlinenumber=$(echo "${terraformplan}" | grep -n 'Run status: planned and saved (confirmable)' | head -n1 | sed 's/:.*//')
          plan=$(echo "${terraformplan}" | head -n "$getlinenumber" | sed -n '1!p')
          export GithubToken=$GithubToken
          export Terraplan=$plan
          export RunUrl=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          export RunId=${{ github.run_id }}
      - name: execute py script
        id: continuerun
        run: |
            import requests, json, sys, time, os     
            def IssueDescription(plan,url):
                approvalbody = '''
                -----
                ##Terraform Approval and Cancel Instructions
                **Valid Approve Comments are _"Approved"_, _"Approve"_, _"approved"_, _"approve"_ to Continue the Terraform Destroy Apply**
                **Valid Dis-Approve or Cancel Comments are _"Denied"_, _"Deny"_, _"denied"_, _"deny"_ to Cancel the Terraform Destroy Apply**
                '''
                Github_RUN_Url = f"Github Run Url -- {url}"
            
                IssueDescription = f"{plan}-{approvalbody}-{Github_RUN_Url}"
                return IssueDescription
            
            Github_PAT = os.environ.get('GithubToken') #sys.argv[1] #{sys.argv[1]}
            owner = "BrazilAmazon"
            repo = "terraform_poc"
            assignees = {"Abdul007k","Abdulk777"}
            temp_assignees = ["Abdul007k","Abdulk777"]
            def headers(token):
                headers = {
                    "accept" : "application/vnd.github+json",
                    "Authorization" : f"Bearer {token}",
                    "X-GitHub-Api-Version" : "2022-11-28",
                }
                return headers
            
            Description = IssueDescription(plan=os.environ.get('Terraplan'),url=os.environ.get('RunUrl'))
            def CreateIssue():
            
                CreateIssueForApproval = f"https://api.github.com/repos/{owner}/{repo}/issues"
                body = {"title":f"Terraform Approval Run ID:{os.environ.get('RunId')}","body":f"{Description}.","assignees":["Abdul007k","Abdulk777"],"labels":["Terraform Approval"]}
                CreateIssue = requests.post(CreateIssueForApproval,headers=headers(token=Github_PAT), data=json.dumps(body))
            
                return CreateIssue
            
            IssueNumner = CreateIssue()
            
            def UpdateIssue():
            
                UpdateIssueState = f"https://api.github.com/repos/{owner}/{repo}/issues/{IssueNumner.json()['number']}"
                body = {"title":f"Terraform Approval Run ID:{os.environ.get('RunId')}","body":f"{Description}.","assignees":["Abdul007k","Abdulk777"], "state":"closed" ,"labels":["Terraform Approval"]}
                UpdateIssue_State = requests.patch(UpdateIssueState,headers=headers(token=Github_PAT), data=json.dumps(body))
            
                return UpdateIssue_State
 
            TerraformApplyContinue = 0
            Approvers_list = set()
            while 1:
                GetIssueForApproval = f"https://api.github.com/repos/{owner}/{repo}/issues/{IssueNumner.json()['number']}/comments"
                GetIssue = requests.get(GetIssueForApproval,headers=headers(token=Github_PAT))
                #print(GetIssue.json())
                if len(GetIssue.json()) <=0:
                    print(f"Waiting For Approval -- Check With {temp_assignees}", flush=True)
                elif len(GetIssue.json()) >=1:
                    objs = len(GetIssue.json())
                    print(f"Waiting For Approval -- Check With {temp_assignees}", flush=True)
                    commentbody = GetIssue.json()[objs-1]['body']
                    user = GetIssue.json()[objs-1]['user']['login']
                    if str(commentbody).lower() == "approved" or str(commentbody).lower() == "approve" and user in assignees:
                        TerraformApplyContinue = 1
                        Approvers_list.add(user)
                        print(f"Issue Comment -- {GetIssue.json()[objs-1]['body']}--{Approvers_list}", flush=True)
                        try:
                          temp_assignees.remove(f"{user}")
                        except:
                            pass
                        if assignees == Approvers_list:
                            if IssueNumner.json()['state'] == "open":
                                UpdateIssue()
                            break
                    elif str(commentbody).lower() == "denied" or str(commentbody).lower() == "deny" and user in assignees:
                        TerraformApplyContinue = 2
                        if IssueNumner.json()['state'] == "open":
                            UpdateIssue()
                        break
                time.sleep(3)
            
            name = 'TerraformApplyContinue'
            value = TerraformApplyContinue
            with open(os.environ['GITHUB_OUTPUT'], 'a') as TAC:
                print(f'{name}={value}', file=TAC)

        shell: python

  apply:
    needs: ['Approvals']
    name: "apply"
    runs-on: ubuntu-latest
    if:  needs.Approvals.outputs.TerraformApplyContinue == 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
   
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: $TF_TOKEN_app_terraform_io  
      # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
         name: tfplan
         
      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Plan
        run: terraform apply tfplan
