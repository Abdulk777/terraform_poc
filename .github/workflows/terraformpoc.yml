name: "Terraform Plan"

on:
  workflow_call:
    inputs:
      Tf_Cloud_Organization:
        description: "cloud organization"
        required: true
        type: string
      Tf_Cloud_Hostname:
        required: true
        type: string
      Tf_Workspace:
        required: true
        type: string
      Tf_Destroy:
        required: true
        type: string
    secrets:
      TF_API_TOKEN:
       required: true
      

env:
  TF_CLOUD_ORGANIZATION : ${{ inputs.Tf_Cloud_Organization }}
  TF_CLOUD_HOSTNAME : ${{ inputs.Tf_Cloud_Hostname }}
  TF_WORKSPACE : ${{ inputs.Tf_Workspace }}
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
  TF_DESTROY: ${{ inputs.Tf_Destroy }}
 # ARM_CLIENT_ID:  ${{ vars.ARM_CLIENT_ID }}
 # ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
 # ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
 # ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
   
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: $TF_TOKEN_app_terraform_io

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Destroy Plan
        run: |
            echo "------------------------------------------"
            export exitcode=0
            autotfvars=()
            for file in $(ls dev/); do
                if [[ "$file" == *auto.tfvars ]]; then
                    autotfvars+=("$PWD/dev/$file")
                fi
            done
            echo "==============================="
            echo "${autotfvars[0]}"
            echo "${autotfvars[*]}"
            echo "$PWD"
            echo "+++++++++++++++++++++++++++++"
            
            if [[ "$TF_DESTROY" == "targetmodules" ]]; then
                deletemodules=(module.rg.azurerm_service_plan.example)
                for module in "${deletemodules[@]}"; do
                    formdestroycommand+=" -target=$module"
                done
            
                if [[ "${#autotfvars[@]}" -gt 1 ]]; then
                    terraform plan -destroy -var-file=<(cat ${autotfvars[*]}) $formdestroycommand -out tfdestroyplan || export exitcode=$?
                    echo "exitcode=$exitcode" >>$GITHUB_OUTPUT
            
                    if [ "$exitcode" -eq 1 ]; then
                        echo "Terraform Destroy Plan Failed!"
                        exit 1
                    else
                        exit 0
                    fi
                else
                    terraform plan -destroy -var-file=<(cat ${autotfvars[0]}) $formdestroycommand -out tfdestroyplan || export exitcode=$?
                    echo "exitcode=$exitcode" >>$GITHUB_OUTPUT
            
                    if [ "$exitcode" -eq 1 ]; then
                        echo "Terraform Destroy Plan Failed!"
                        exit 1
                    else
                        exit 0
                    fi
                fi
            
            elif [[ "$TF_DESTROY" == "tfstate" ]]; then
                if [[ "${#autotfvars[@]}" -gt 1 ]]; then
                
                    terraform plan -destroy -var-file=<(cat ${autotfvars[*]}) -out tfdestroyplan || export exitcode=$?
                    echo "exitcode=$exitcode" >>$GITHUB_OUTPUT
            
                    if [ "$exitcode" -eq 1 ]; then
                        echo "Terraform Destroy Plan Failed!"
                        exit 1
                    else
                        exit 0
                    fi
                else
                
                    terraform plan -destroy -var-file=<(cat ${autotfvars[0]}) -out tfdestroyplan || export exitcode=$?
                    echo "exitcode=$exitcode" >>$GITHUB_OUTPUT
            
                    if [ "$exitcode" -eq 1 ]; then
                        echo "Terraform Destroy Plan Failed!"
                        exit 1
                    else
                        exit 0
                    fi
                fi
            fi
            
      # Save plan to artifacts  
      - name: Publish Artifact - Terraform Destroy Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfdestroyplan
          path: tfdestroyplan

      # Create string output of Terraform destroy Plan
      - name: Create String Output
        id: tf-destroy-plan-string
        run: |
          TERRAFORM_DESTROY_PLAN=$(terraform show -no-color tfdestroyplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Destroy Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_DESTROY_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Destroy Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-destroy-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
          
      # If this is a PR post the changes
      - name: Push Terraform Destroy Output to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          SUMMARY: "${{ steps.tf-destroy-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })
                    
  
  terraform-destroy-apply:
    name: 'Terraform Destroy Apply'
    #if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    if: needs.terraform-plan.outputs.tfplanExitCode == 2
    needs: [terraform]
    runs-on: ubuntu-latest
    environment: Approvals
    #defaults:
     # run:
      #  working-directory: ${{ github.event.inputs.terraform_working_directory }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
       # terraform_wrapper: false
       # terraform_version: ${{ github.event.inputs.tf_version }}
        cli_config_credentials_token: $TF_TOKEN_app_terraform_io

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfdestroyplan

    # Terraform Destroy Apply
    - name: Terraform Destroy Apply
      if: ${{true}}
      run: |
        ls -lra 
        # -auto-approve not needed if we are passing tfplan file
        terraform apply tfdestroyplan 
